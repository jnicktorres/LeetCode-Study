{"id":759119283,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1659022696,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/759119283/","is_pending":"Not Pending","title":"Merge Intervals","memory":"47.2 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n     \n     ArrayList<int[]> merged = new ArrayList();\n     Arrays.sort(intervals,(a,b) ->                 Integer.compare(a[0],b[0]));\n     int[] cur = intervals[0];\n     int[] newInt = new int[2];\n     \n        for(int i = 1; i < intervals.length;i++){\n            if(cur[1] >= intervals[i][0]){\n               cur[1] = Math.max(cur[1], intervals[i][1]);\n            }   \n            else{\n                merged.add(cur);\n                cur = intervals[i];\n            }\n        }\n       merged.add(cur);\n        \n        return merged.toArray(new int[merged.size()][2]);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}