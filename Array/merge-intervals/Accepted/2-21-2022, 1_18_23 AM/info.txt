{"id":645840148,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645427903,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/645840148/","is_pending":"Not Pending","title":"Merge Intervals","memory":"55.6 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n        Arrays.sort(intervals, (arr1,arr2) -> Integer.compare(arr1[0],arr2[0]));\n        \n        List<int[]> list = new ArrayList();\n        int[] curr = intervals[0];\n        list.add(curr);\n        \n        for(int[] interval : intervals){\n            \n            int currBeg = curr[0];\n            int currEnd = curr[1];\n            int interBeg = interval[0];\n            int interEnd = interval[1];\n            \n            if(currEnd >= interBeg){\n                curr[1] = Math.max(currEnd,interEnd);\n            }\n            else{\n            curr = interval;\n            list.add(curr);\n            }\n            \n         }\n        \n        return list.toArray(new int[list.size()][]);\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}