{"id":647863858,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645676556,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/647863858/","is_pending":"Not Pending","title":"Merge Intervals","memory":"55.2 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n        \n        List<int[]> ret = new ArrayList();\n        \n        \n        Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0]));\n        int[] curr = intervals[0];\n        ret.add(curr);\n        for(int[] i : intervals){\n            int currBeg = curr[0];\n            int currEnd = curr[1];\n            int iBeg = i[0];\n            int iEnd = i[1];\n                     \n            if(currEnd >= iBeg){\n                curr[1] = Math.max(currEnd, iEnd);                \n              \n            }\n            else{\n                curr = i;\n                ret.add(curr);\n                \n            }\n                     \n        }\n        \n        \n        return ret.toArray(new int[ret.size()][]);\n        \n        \n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}