{"id":646495110,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645504542,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/646495110/","is_pending":"Not Pending","title":"Merge Intervals","memory":"55 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        if(intervals.length == 0){\n            return new int[][]{};\n        }\n        \n        List<int[]> list = new ArrayList();\n        Arrays.sort(intervals,(a,b) -> Integer.compare(a[0],b[0]));\n        \n        int[] curr  = intervals[0];\n        list.add(curr);\n        \n        for(int[] i : intervals){\n            int currBegin = curr[0];\n            int currEnd = curr[1];\n            int iBegin = i[0];\n            int iEnd = i[1];\n            \n            if(currEnd >= iBegin){\n                curr[1] = Math.max(currEnd, iEnd);\n            }\n            else{\n                curr = i;\n                list.add(curr);\n            }\n            \n        }\n        \n        return list.toArray(new int[list.size()][]);\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}