{"id":638156325,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644443698,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/638156325/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"45.7 MB","code":"class Solution {\n    public int maxProduct(int[] nums) {\n       if (nums == null || nums.length == 0) {\n            return -1;\n        }\n        \n        if (nums.length == 1) {\n            return nums[0];\n        }\n        \n        Integer minSoFar = nums[0];\n        Integer maxSoFar = nums[0];\n        Integer result = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            Integer num = nums[i];\n            if (num > 0) {\n                minSoFar = Math.min(num, minSoFar * num);\n                maxSoFar = Math.max(num, maxSoFar * num);\n            } else if (num < 0) {\n                Integer temp = minSoFar;\n                minSoFar = Math.min(num, maxSoFar * num);\n                maxSoFar = Math.max(num, temp * num);\n            } else {\n                minSoFar = 0;\n                maxSoFar = 0;\n            }\n            \n            result = Math.max(result, maxSoFar);\n        }\n        \n        return result;\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray","has_notes":false}