{"id":758418947,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1658952706,"status":10,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/758418947/","is_pending":"Not Pending","title":"LRU Cache","memory":"124 MB","code":"class LRUCache {\n    HashMap<Integer,Node> map = new HashMap();\n    final Node head = new Node();\n    final Node tail = new Node();\n    int cap;\n    \n    \n    public LRUCache(int capacity) {\n        map = new HashMap(capacity);\n        this.cap = capacity;    \n        head.next = tail;\n        tail.prev = head;\n    }\n    \n    public int get(int key) {\n        Node node = map.get(key);\n        int ret = -1;\n        if(node != null){\n            ret = node.val;\n            remove(node);\n            add(node);\n        }\n        return ret;\n        \n        \n        \n    }\n    \n    public void put(int key, int value) {\n        Node node = map.get(key);\n        \n        if(node != null){\n            remove(node);\n            node.val = value;\n            add(node);\n            \n        }\n        else{\n            if(map.size() == cap){\n                map.remove(tail.prev.key);\n                remove(tail.prev);\n            }\n            Node newNode = new Node();\n            newNode.key = key;\n            newNode.val = value;\n            map.put(key,newNode);\n            add(newNode);\n        }\n        \n        \n    }\n    \n    public void add(Node node){\n        Node headnext = head.next;\n        node.next = headnext;\n        headnext.prev = node;\n        head.next = node;\n        node.prev = head;\n    }\n    \n    public void remove(Node node){\n        Node nextnode = node.next;\n        Node prevnode = node.prev;\n        \n        nextnode.prev = prevnode;\n        prevnode.next = nextnode;\n    }\n    \n}\n\npublic class Node{\n        int key;\n        int val;\n        Node next;\n        Node prev;\n        \n        \n    }\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false}