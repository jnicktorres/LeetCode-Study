{"id":647923047,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645683135,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/647923047/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"43.6 MB","code":"class Solution {\n    public boolean search(int[] nums, int target) {\n        \n        \n        int start = 0;\n        int end = nums.length - 1;\n        \n     while(start <= end){\n        int mid = start + (end - start)/2;\n        if(nums[mid] == target) return true;\n        \n        //if left part is sorted\n        if(nums[start] < nums[mid]){\n            if(target < nums[start] || target > nums[mid]){\n                //target is in rotated part\n                start = mid + 1;\n            }else{\n                end = mid - 1;\n            }\n        }else if(nums[start] > nums[mid]){\n            //right part is rotated\n            \n            //target is in rotated part\n            if(target < nums[mid] || target > nums[end]){\n                end = mid -1;\n            }else{\n                start = mid + 1;\n            }\n        }else{\n            //duplicates, we know nums[mid] != target, so nums[start] != target\n            //based on current information, we can only move left pointer to skip one cell\n            //thus in the worest case, we would have target: 2, and array like 11111111, then\n            //the running time would be O(n)\n            start ++;\n        }\n    }\n        \n        return false;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false}