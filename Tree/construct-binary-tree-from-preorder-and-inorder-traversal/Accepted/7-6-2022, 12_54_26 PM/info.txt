{"id":740261159,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1657130066,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/740261159/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"68.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        if (preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0){\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[0]);\n        if(preorder.length == 1){\n            return root;\n        }\n        int index = 0;\n        for(int i =0; i < inorder.length;i++){\n            if(inorder[i] == preorder[0]){\n                index = i;\n            }\n        }\n        \n        int[] preleftsub = Arrays.copyOfRange(preorder, 1, index+1);\n        int[] inleftsub =  Arrays.copyOfRange(inorder, 0, index);\n        int[] prerightsub = Arrays.copyOfRange(preorder, index + 1, preorder.length);\n        int[] inrightsub = Arrays.copyOfRange(inorder, index+1, inorder.length);\n        root.left = buildTree(preleftsub,inleftsub);\n        root.right = buildTree(prerightsub,inrightsub);\n        return root;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}