{"id":740286530,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1657131871,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/740286530/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int index = 0;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        HashMap<Integer,Integer> map = new HashMap();\n        \n        for(int i = 0; i < inorder.length;i++){\n            map.put(inorder[i],i);\n        }\n        \n        return helper(map,preorder,0,inorder.length-1);\n        \n        \n        \n    }\n    \n    private TreeNode helper(HashMap<Integer,Integer> map, int[] preorder, int start, int end){\n        if(start>end){\n            return null;\n        }\n        int var = preorder[index++];\n        TreeNode root = new TreeNode(var);\n        int cur = map.get(var);\n        root.left = helper(map,preorder,start, cur - 1);\n        root.right = helper(map,preorder,cur+1, end);\n        \n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}