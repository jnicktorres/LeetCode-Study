{"id":639001503,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644549800,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/639001503/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"46.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n        if(root == null){\n            return false;\n        }\n        \n        else if(isSameTree(root,subRoot)){\n            return true;\n        }\n        else{\n            \n            return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);\n        }\n    }\n    \n    private boolean isSameTree(TreeNode root, TreeNode subRoot){\n        if(root == null || subRoot == null){\n            return root==null && subRoot == null;\n        }\n        else if(root.val == subRoot.val){\n            return isSameTree(root.left,subRoot.left) && isSameTree(root.right,subRoot.right);\n        }\n        else{\n            return false;\n        }\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false}