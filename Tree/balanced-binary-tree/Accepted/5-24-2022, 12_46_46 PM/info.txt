{"id":706358291,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1653414406,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/706358291/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        \n        return height(root) != -1;\n        \n                \n    }\n    \n    private int height(TreeNode root){\n        if(root == null){\n            return 0;\n        }\n        \n        int left = height(root.left);\n        int right = height(root.right);\n        if (left == -1 || right == -1 || Math.abs(left - right) > 1) return -1;\n\n       \n        return Math.max(left,right) + 1;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false}