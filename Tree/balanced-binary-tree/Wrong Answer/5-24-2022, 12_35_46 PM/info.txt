{"id":706350848,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1653413746,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/706350848/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        \n        int left = findDepth(root.left);\n        int right = findDepth(root.right);\n        \n        if(Math.abs(left-right) > 1){\n            return false;\n        }\n        \n            return true;\n                \n    }\n    \n    private int findDepth(TreeNode node){\n        if(node == null){\n            return 0;\n        }\n        return Math.max(findDepth(node.left),findDepth(node.right)) + 1;\n    }\n\n}","compare_result":"111111111111011011110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110010000100000011000011111111111111111111111111111111111111111111111111111111111111111000001111","title_slug":"balanced-binary-tree","has_notes":false}