{"id":706344310,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1653413170,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/706344310/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        int countLeft = 0;\n        int countRight = 0;\n        \n        int left = findDepth(root.left,countLeft);\n        int right = findDepth(root.right,countRight);\n        \n        if(Math.abs(left-right) > 1){\n            return false;\n        }\n        \n            return true;\n                \n    }\n    \n    private int findDepth(TreeNode node,int count){\n        if(node.left == null && node.right == null){\n            count++;\n            return count;\n        }\n        else if(node.left == null && node.right != null){\n            count++;\n            findDepth(node.right,count);\n        }\n        else if(node.left != null && node.right == null){\n            count++;\n            findDepth(node.left,count);\n        }\n        else{\n            count++;\n            return Math.max(findDepth(node.left,count),findDepth(node.right,count));\n        }\n        return -1;\n        \n    }\n\n}","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"balanced-binary-tree","has_notes":false}