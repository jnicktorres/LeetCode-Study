{"id":740213873,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1657126561,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/740213873/","is_pending":"Not Pending","title":"Permutations","memory":"45.2 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n       List<List<Integer>> ls = new ArrayList<>();;\n            backtrack(ls, new ArrayList<>(), nums);\n            return ls;\n        }\n    \n    private void backtrack(List<List<Integer>> list,List<Integer> tempList, int[] nums){\n        if(tempList.size() == nums.length){\n            list.add(new ArrayList<>(tempList));\n        }\n        \n        else{\n            for(int i = 0; i < nums.length;i++){\n                if(tempList.contains(nums[i])) continue;\n                tempList.add(nums[i]);\n                backtrack(list,tempList,nums);\n                tempList.remove(tempList.size()-1);\n            }\n            \n        }\n        \n    \n        \n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false}