{"id":712862634,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1654182482,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/712862634/","is_pending":"Not Pending","title":"Combination Sum","memory":"45.2 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> ls = new ArrayList();\n        List<Integer> temp = new ArrayList();\n        Arrays.sort(candidates);\n        backtrack(ls,temp,target,candidates,0);\n        return ls;\n        \n        \n    }\n    private void backtrack( List<List<Integer>> ls,List<Integer> temp, int remain,int[] candidates,int start){\n        if(remain < 0){\n            return;\n        }\n        else if(remain == 0){\n            ls.add(new ArrayList<>(temp));\n            }\n        else{\n            for(int i = start; i < candidates.length;i++){\n                temp.add(candidates[i]);\n                backtrack(ls,temp,remain-candidates[i],candidates,i);\n                temp.remove(temp.size()-1);\n                \n                \n            }\n            \n            \n        }\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false}