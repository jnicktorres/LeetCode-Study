{"id":712208455,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1654105737,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/712208455/","is_pending":"Not Pending","title":"Combination Sum","memory":"45.2 MB","code":"class Solution {\n    \n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> ls = new ArrayList();\n        Arrays.sort(candidates);\n         backtrack(ls, new ArrayList<>(), candidates, target, 0);\n        return ls;\n    }\n    \n    private void backtrack(List<List<Integer>> ls, List<Integer> temp, int[] nums, int target,int start){\n        if(target<0){\n            return;\n        }\n        else if(target == 0) ls.add(new ArrayList<>(temp));\n        else{\n            for(int i = start; i < nums.length;i++){\n                temp.add(nums[i]);\n                backtrack(ls, temp, nums, target - nums[i], i); // not i + 1 because we can reuse same elements\n                temp.remove(temp.size() - 1);\n            }\n        }\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false}