{"id":747915790,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1657904475,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/747915790/","is_pending":"Not Pending","title":"Max Area of Island","memory":"42.4 MB","code":"class Solution {\n    int running;\n    public int maxAreaOfIsland(int[][] grid) {\n       int max = 0;\n        \n        for(int i = 0; i < grid.length; i++){\n            for(int j = 0; j < grid[0].length;j++){\n                if(grid[i][j] == 1){\n                     running = 0;\n                     dfs(i,j,grid);\n                     max = Math.max(max,running);                     \n                }\n            }\n        }\n        \n        return max;\n        \n    }\n    \n    private int dfs(int row, int col, int[][] grid){\n        if(row < 0 || col < 0 || row > grid.length - 1 || col > grid[0].length -1 || grid[row][col] == 0){\n            return 0;\n        }\n        grid[row][col] = 0;\n        running = running + 1;\n        dfs(row + 1,col,grid);\n        dfs(row - 1,col,grid);\n        dfs(row,col + 1,grid);\n        dfs(row,col - 1,grid);\n        \n        return running;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-area-of-island","has_notes":false}