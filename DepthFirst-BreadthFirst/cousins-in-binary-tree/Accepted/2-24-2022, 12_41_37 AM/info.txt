{"id":647939423,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645684897,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/647939423/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"41.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode xParent = null;\n    TreeNode yParent = null;\n    int xDepth = -1, yDepth = -1;\n    public boolean isCousins(TreeNode root, int x, int y) {\n        getDepth(root, x, y, 0, null);\n        return xDepth == yDepth && xParent != yParent? true: false;\n\n    }\n    \n    private void getDepth(TreeNode node, int s, int t, int depth, TreeNode parent) {\n        if(node == null){\n            return;\n        }\n        \n        if(node.val == s){\n            xParent = parent;\n            xDepth = depth;\n        }\n        else if(node.val == t){\n            yParent = parent;\n            yDepth = depth;\n        }\n        \n        getDepth(node.left, s, t, depth + 1, node);\n        getDepth(node.right, s, t, depth + 1, node);\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree","has_notes":false}