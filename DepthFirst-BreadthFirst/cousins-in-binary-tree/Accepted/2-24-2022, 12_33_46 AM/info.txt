{"id":647935152,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1645684426,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/647935152/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"41.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCousins(TreeNode root, int A, int B) {\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while(!queue.isEmpty()){\n            int size = queue.size();\n            boolean isAexist = false;\t\t\n\t\t    boolean isBexist = false;\t\n            \n            for (int i = 0; i < size; i++) {               \n                TreeNode cur = queue.poll();\n                if (cur.val == A) isAexist = true;\n                if (cur.val == B) isBexist = true;\n            if (cur.left != null && cur.right != null) { \n\t\t\t\tif (cur.left.val == A && cur.right.val == B) { \n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (cur.left.val == B && cur.right.val == A) { \n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n                if (cur.left != null) {\n\t\t\t\tqueue.offer(cur.left);\n\t\t\t}\n\t\t\tif (cur.right != null) {\n\t\t\t\tqueue.offer(cur.right);\n\t\t\t}\n\t\t}\n\t\tif (isAexist && isBexist)  return true;\n\t}\n\treturn false;\n    }\n}         \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree","has_notes":false}