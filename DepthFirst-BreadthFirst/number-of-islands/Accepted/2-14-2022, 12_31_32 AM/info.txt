{"id":641056862,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644820292,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/641056862/","is_pending":"Not Pending","title":"Number of Islands","memory":"70.4 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        //dfs solution\n        int islands = 0;\n        \n        \n        for(int i = 0; i < grid.length; i++){\n            for(int j = 0; j < grid[0].length;j++){\n                if(grid[i][j] == '1'){\n                    dfs(grid,i,j);\n                    islands++;\n                }\n            }\n        }\n            return islands;\n        \n    }\n        \n        private static void dfs(char[][] grid, int row, int col){\n            final int[][] dir = {{1,0},{-1,0},{0,1},{0,-1}};\n            if(row < 0 || col<0 || row>grid.length - 1 || col > grid[0].length-1){\n                return;\n            }\n            else if(grid[row][col] == '0'){\n                return;\n            }\n            grid[row][col] = '0';\n            \n            for(int[] d : dir){\n\n            dfs(grid, d[0] + row, d[1] + col);\n                }\n        }\n        \n        \n    }\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false}