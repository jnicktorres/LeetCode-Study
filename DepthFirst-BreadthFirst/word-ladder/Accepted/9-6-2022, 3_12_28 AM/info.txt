{"id":792841569,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1662451948,"status":10,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/792841569/","is_pending":"Not Pending","title":"Word Ladder","memory":"90.8 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n            Set<String> WordDict = new HashSet<String>(wordList);\n        \n            return sol(WordDict, beginWord, endWord);\n    }\n    \n    public int sol(Set<String> WordDict, String beg, String end){\n        if(!WordDict.contains(end)){\n            return 0;\n        }\n        Set<String> reached = new HashSet<String>();\n        \n        reached.add(beg);\n        int distance = 1;\n        \n        while(!reached.contains(end)){\n            Set<String> toadd = new HashSet<String>();\n                for(String each : reached){\n                    for(int i = 0 ;i < each.length();i++){\n                        char[] c = each.toCharArray();\n                        for(char j = 'a'; j <= 'z'; j++){\n                            c[i] = j;\n                            String word = new String(c);\n                            if(WordDict.contains(word)){\n                                toadd.add(word);\n                                WordDict.remove(word);\n                                \n                            }\n                         \n                        }\n                      \n                    }\n                    \n                }\n            \n            distance++;\n            \n            if(toadd.size() == 0){\n                return 0;\n            }    \n             reached = toadd;\n            \n            \n        }\n        \n        \n        return distance;\n        \n        \n        \n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false}