{"id":762626429,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1659381980,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/762626429/","is_pending":"Not Pending","title":"Word Ladder","memory":"91.5 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        Set<String> wordDict= new HashSet<>(wordList);\n        return LadderLength(beginWord, endWord, wordDict);\n    }\n    \n    public int LadderLength(String beginWord, String endWord, Set<String> wordDict) { \n       if(!wordDict.contains(endWord)) {\n            return 0;\n        }\n        Set<String> reached = new HashSet<String>();\n        reached.add(beginWord);\n        int distance = 1;\n        while (!reached.contains(endWord)) {\n            Set<String> toAdd = new HashSet<String>();\n            for (String each : reached) {\n                for (int i = 0; i < each.length(); i++) {\n                    char[] chars = each.toCharArray();\n                    for (char ch = 'a'; ch <= 'z'; ch++) {\n                        chars[i] = ch;\n                        String word = new String(chars);\n                        if (wordDict.contains(word)) {\n                            toAdd.add(word);\n                            wordDict.remove(word);\n                        }\n                    }\n                }\n            }\n            distance++;\n            if (toAdd.size() == 0) return 0;\n            reached = toAdd;\n        }\n        return distance;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false}