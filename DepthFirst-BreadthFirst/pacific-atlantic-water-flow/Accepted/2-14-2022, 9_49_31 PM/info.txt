{"id":641620793,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644896971,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/641620793/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"54.4 MB","code":"class Solution {\n    public List<List<Integer>> pacificAtlantic(int[][] matrix) {\n       int[][] pacific = new int[matrix.length][matrix[0].length]; \n       int[][] atlantic = new int[matrix.length][matrix[0].length]; \n        \n        if(matrix.length == 0){\n            return new ArrayList<List<Integer>>();\n        }\n        // only need to call dfs on borders of oceans.\n        \n        \n     // top and bottom borders \n    for(int col = 0 ; col < matrix[0].length;col++){\n       dfs(matrix,0,col, Integer.MIN_VALUE, pacific);\n       dfs(matrix,matrix.length-1,col,Integer.MIN_VALUE, atlantic); \n    } \n    // left and  right borders\n        \n        for(int row =0; row < matrix.length;row++){\n            dfs(matrix,row,0,Integer.MIN_VALUE,pacific);\n            dfs(matrix,row,matrix[0].length-1,Integer.MIN_VALUE,atlantic);\n        }\n        \n        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();\n        \n        // comapres pacific and atlantic and if 1 are matching it means a path exists between the two oceans, so add it to our linked list.\n        for(int i = 0; i < matrix.length;  i++){\n            for(int j = 0; j < matrix[0].length;j++){\n                if(pacific[i][j] == 1 && atlantic[i][j] == 1){\n                    LinkedList<Integer> sol = new LinkedList<Integer>();\n                    sol.add(i);\n                    sol.add(j);\n                    res.add(sol);\n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    \n    private static void dfs(int[][] grid,int row,int col, int prev, int[][] ocean){\n        \n        // Check Necessary Conditions \n        if(row < 0 || col < 0 || col > grid[0].length - 1 || row > grid.length-1){\n            return;\n        }\n        else if(grid[row][col] < prev){\n            return;\n        }\n        else if(ocean[row][col] == 1){\n            return;\n        }\n        \n        // Process Cell\n        ocean[row][col] = 1;\n        \n        // Call dfs\n        dfs(grid, row-1, col, grid[row][col], ocean);\n        dfs(grid, row+1, col, grid[row][col], ocean);\n        dfs(grid, row, col-1, grid[row][col], ocean);\n        dfs(grid, row, col+1, grid[row][col], ocean);\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false}