{"id":717553751,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1654715936,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/717553751/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"43.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        \n        List<List<Integer>> ls = new ArrayList<>();\n        if(root == null){\n            return ls;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            \n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for(int i = 0; i < size;i++){\n                TreeNode node = q.poll();                \n                level.add(node.val);\n                \n                if(node.left != null){\n                    q.add(node.left);\n                }\n                if(node.right != null){\n                    q.add(node.right);\n                }\n                \n                \n            }\n        \n            \n            ls.add(level);\n        }\n        \n        \n        return ls;\n        \n    }\n\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false}