{"id":636048854,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644192640,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/636048854/","is_pending":"Not Pending","title":"Course Schedule","memory":"N/A","code":"class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n        if(numCourses == 0 || prerequisites.length ==0) return true;\n        \n        int[] indegree = new int[numCourses];\n        \n        for(int i = 0; i < prerequisites.length;i++){\n            \n            indegree[prerequisites[i][0]]++; \n        }\n        \n        Queue<Integer> q = new LinkedList<Integer>();\n        for(int i = 0; i < numCourses;i++){\n            if (indegree[i] == 0)\n            q.add(i);\n            \n        }\n        \n        int courtoFin = q.size();\n        \n        while(!q.isEmpty()){\n            int pre = q.remove();\n            for(int i = 0; i < prerequisites.length;i++){\n                if (prerequisites[i][1] == prerequisite) { \n                indegree[prerequisites[i][0]]--;\n                if (indegree[prerequisites[i][0]] == 0) {\n                    canFinishCount++;\n                    queue.add(prerequisites[i][0]);\n                }\n            } \n                \n            }\n            \n            \n            \n        }\n        return (canFinishCount == numCourses);\n    }\n}","compare_result":null,"title_slug":"course-schedule","has_notes":false}