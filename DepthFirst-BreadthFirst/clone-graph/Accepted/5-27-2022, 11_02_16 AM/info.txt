{"id":708416270,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1653667336,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/708416270/","is_pending":"Not Pending","title":"Clone Graph","memory":"43.8 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null){\n            return null;\n        }\n        \n        HashMap<Integer, Node> map = new HashMap();\n        \n        return dfs(node,map);\n    }\n    \n    private Node dfs(Node node, HashMap<Integer,Node> map){\n        if(map.containsKey(node.val)){\n            return map.get(node.val);\n        }\n        Node copy = new Node(node.val);\n        \n        map.put(node.val,copy);\n        \n        for(Node nei : node.neighbors){\n            copy.neighbors.add(dfs(nei,map));\n        }\n        \n        return copy;\n        \n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}