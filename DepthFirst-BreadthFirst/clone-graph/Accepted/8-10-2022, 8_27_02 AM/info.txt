{"id":770221789,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1660138022,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/770221789/","is_pending":"Not Pending","title":"Clone Graph","memory":"43.4 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null)\n        {\n            return null;\n        }\n        HashMap<Integer, Node> map = new HashMap<>();\n        \n        return clone(map, node);\n        \n    }\n    \n    public Node clone(HashMap<Integer, Node> map, Node node){\n        if(map.containsKey(node.val)){\n            return map.get(node.val);\n        }\n        Node copy = new Node(node.val);        \n        map.put(copy.val, copy);\n        \n        for(Node nei : node.neighbors){\n            \n            copy.neighbors.add(clone(map, nei));\n            \n        }\n        \n        return copy;\n        \n        \n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}