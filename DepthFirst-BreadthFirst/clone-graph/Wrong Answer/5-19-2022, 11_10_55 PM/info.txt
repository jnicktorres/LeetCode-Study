{"id":703188811,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1653019855,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/703188811/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null){\n            return null;\n        }\n        Map<Integer, Node> map = new HashMap<>();\n        \n         return dfs(map,node); \n    }\n    \n    private Node dfs(Map<Integer,Node> map , Node node){\n        if(map.containsKey(node.val)){\n            return map.get(node.val);\n        }\n        Node copy = new Node(node.val);\n        map.put(copy.val, copy);\n        \n        for(Node nei : node.neighbors){\n            copy.neighbors.add(dfs(map,nei));\n        }\n        return node;\n    }\n}","compare_result":"0010000000000000000000","title_slug":"clone-graph","has_notes":false}