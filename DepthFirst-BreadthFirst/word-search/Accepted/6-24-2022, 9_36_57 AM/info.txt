{"id":730170464,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1656081417,"status":10,"status_display":"Accepted","runtime":"201 ms","url":"/submissions/detail/730170464/","is_pending":"Not Pending","title":"Word Search","memory":"41.4 MB","code":"class Solution {\n    static boolean[][] visited;\n    public boolean exist(char[][] board, String word) {\n        visited = new boolean[board.length][board[0].length];\n        \n        \n        \n        for(int i = 0; i < board.length;i++){\n            for(int j = 0; j < board[0].length;j++){\n                if(board[i][j] == word.charAt(0) && dfs(0,word,board,i,j)){\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n        \n        \n    }\n    \n    private boolean dfs(int curr,String word, char[][] grid, int row, int col){\n        if(curr == word.length()){\n            return true;\n        }\n        if(row > grid.length-1 || col > grid[0].length-1 || row < 0 || col < 0 || visited[row][col] || grid[row][col] != word.charAt(curr)){\n            return false;\n        }\n        visited[row][col] = true;\n        \n        if(dfs(curr+1,word,grid,row+1,col)|| dfs(curr+1,word,grid,row-1,col)|| dfs(curr+1,word,grid,row,col+1)||dfs(curr+1,word,grid,row,col-1)){\n            return true;\n        }\n\n        visited[row][col] = false;\n        return false;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false}