{"id":708411595,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1653666792,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/708411595/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if(root == null) return 0;\n        \n        int left = dfs(root.left);\n        int right = dfs(root.right);\n        \n        return Math.max(left,right) + 1;\n    }\n    \n    private int dfs(TreeNode node){\n        \n        if(node == null){\n            return 0;\n        }\n        else{\n            return Math.max(dfs(node.left) + 1, dfs(node.right) +1);\n            \n            \n        }\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false}