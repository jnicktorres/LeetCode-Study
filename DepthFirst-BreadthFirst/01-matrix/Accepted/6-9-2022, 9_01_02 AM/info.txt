{"id":718139242,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1654783262,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/718139242/","is_pending":"Not Pending","title":"01 Matrix","memory":"71.2 MB","code":"class Solution {\n    \n    int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};\n    public int[][] updateMatrix(int[][] mat) {\n        Queue<int[]> q = new LinkedList();\n        int l = mat.length;\n        int h = mat[0].length;\n        \n        for(int i =0; i < l;i++){\n            for(int j = 0;j < h;j++){\n                if(mat[i][j] == 0){\n                    q.offer(new int[]{i,j});\n                }\n                else{\n                    mat[i][j] = -1;\n                }\n            }\n        }\n        \n        while(!q.isEmpty()){\n            int[] cur = q.poll();\n            for(int[] dir : dirs){\n                int x = cur[0] + dir[0];\n                int y = cur[1] + dir[1];\n                \n                if(x < 0 || y < 0 || x > l-1 || y > h -1 || mat[x][y] != -1) continue;\n                mat[x][y] = mat[cur[0]][cur[1]] + 1;\n                q.offer(new int[]{x,y});\n                \n                \n            }\n            \n            \n        }\n        \n            return mat;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false}