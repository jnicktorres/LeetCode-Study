{"id":730131586,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1656077418,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/730131586/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> ls = new ArrayList();\n        if(root == null){\n            return ls;\n        }\n        Queue<TreeNode> q = new LinkedList();\n        q.offer(root);\n        \n        \n        while(!q.isEmpty()){\n            int size = q.size();\n            \n            while(size > 0){\n                TreeNode cur = q.poll();\n                if(size == 1){\n                    ls.add(cur.val);\n                }\n                 if(cur.left != null){\n                    q.offer(cur.left);\n                }\n                 if(cur.right != null){\n                    q.offer(cur.right);\n                }\n                size--;\n            }\n            \n            \n        }\n        return ls;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false}