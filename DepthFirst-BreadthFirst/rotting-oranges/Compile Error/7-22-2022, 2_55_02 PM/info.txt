{"id":754001224,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1658519702,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/754001224/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution {\n    public int orangesRotting(int[][] grid) {\n        \n        Queue<int[]> q = new LinkedList();\n        int fresh = 0;\n        \n        \n        for(int i = 0; i < grid.length;i++){\n            for(int j = 0; j < grid[0].length;j++){\n                if(grid[i][j] == 2){\n                    q.offer(new int[]{i,j});\n                }\n                else if(grid[i][j] == 1){\n                    fresh++;\n                }\n                \n            }\n        }\n        if(fresh == 0){\n            return 0;\n        }\n        int time = 0;\n        int[][] dirs = {{1,0},{-1,0},{0,-1},{0,1}};\n        while(!q.isEmpty()){\n            int size = q.size();\n            time++;\n            for(int i = 0; i < size();i++){\n                int[] curr = q.poll();\n                for(int[] dir : dirs){\n                    int x = curr[0] + dir[0];\n                    int y = curr[1] + dir[1];\n                    if(x < 0 || y < 0 || x > grid.length-1 || y > grid[0].length- 1 || grid[x][y] == 2 || grid[x][y] == 0){\n                        continue;\n                    }\n                    grid[x][y] = 2;\n                    q.offer(new int[]{x,y});\n                    fresh--;\n                    \n                }\n                \n                \n                \n                \n            }\n            \n            \n        }\n        \n        return fresh == 0 ? time-1 : -1;\n        \n        \n    }\n}","compare_result":null,"title_slug":"rotting-oranges","has_notes":false}