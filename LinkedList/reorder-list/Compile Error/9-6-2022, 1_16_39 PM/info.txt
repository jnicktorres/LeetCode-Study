{"id":793223830,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1662488199,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/793223830/","is_pending":"Not Pending","title":"Reorder List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        \n      \n        //If there is one node or two nodes only\n        if(head.next == null || head.next.next == null) return;\n        \n        ListNode slow = head;\n        ListNode fast = head;\n        \n        while(fast != null && fast.next != null){\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        //slow points to the mid node. So we want to reverse the linked list after mid\n        ListNode reverseList = reverse(slow.next);\n        slow.next = null;\n\n        ListNode pointer1 = head;\n        ListNode pointer2 = reverseList;\n \n        //Now all that's left is connecting the nodes properly\n        while(pointer2 != null){\n            ListNode next1 = pointer1.next;\n            ListNode next2  = pointer2.next;\n            \n            pointer1.next = pointer2;\n            pointer1 = next1;\n\n            pointer2.next = pointer1;\n            pointer2 = next2;            \n        }\n        \n    }\n}","compare_result":null,"title_slug":"reorder-list","has_notes":false}