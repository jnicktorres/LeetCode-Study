{"id":793224198,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1662488226,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/793224198/","is_pending":"Not Pending","title":"Reorder List","memory":"54.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n            if(head==null||head.next==null) return;\n    \n    ListNode l1 = head,slow=head,prev=null,fast=head;\n    while(fast!=null&&fast.next!=null)\n    {\n        prev=slow;\n        slow=slow.next;\n        fast=fast.next.next;\n    }\n    prev.next=null;\n    \n    ListNode l2 = reverse(slow);\n    \n    merge(l1,l2);\n    \n}\n\npublic ListNode reverse(ListNode head)\n{\n    ListNode curr = head,prev=null,nex=null;\n    while(curr!=null)\n    {\n        nex=curr.next;\n        curr.next=prev;\n        prev=curr;\n        curr=nex;\n    }\n    return prev;\n}\n\npublic void merge(ListNode first, ListNode second)\n{\n    ListNode nex1=null,nex2=null;\n    while(first.next!=null)\n    {\n        nex1=first.next;\n        nex2=second.next;\n        first.next=second;\n        second.next=nex1;\n        first=nex1;\n        second=nex2;\n    }\n    first.next=second;\n}\n}","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false}