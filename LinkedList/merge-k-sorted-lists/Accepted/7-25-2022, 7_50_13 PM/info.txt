{"id":756774687,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1658796613,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/756774687/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.7 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n        ListNode head = new ListNode(0);\n        ListNode cur = head;\n        if (lists == null || lists.length < 1) {\n        return null;\n    }\n        \n        PriorityQueue<ListNode> heap = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){\n            \n            public int compare(ListNode l1, ListNode l2){\n                 return l1.val - l2.val;\n            }\n        });\n        \n        for(int i = 0; i < lists.length;i++){\n               if(lists[i] != null){\n                   heap.offer(lists[i]);\n               }\n        }\n        \n        while(!heap.isEmpty()){\n             ListNode temp = heap.poll();\n             cur.next = temp;\n             if(temp.next != null){\n                 heap.offer(temp.next);\n             }\n            cur = temp;\n                \n        }\n        \n        return head.next;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false}