{"id":638398968,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1644473089,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/638398968/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if(head == null){\n            return false;\n        }\n        \n        ListNode fast = head.next.next;\n        ListNode slow = head.next;\n        \n        while(fast.next != slow && fast.next != null){\n            \n            if(slow == fast){\n                return true;\n            }\n            \n            fast = fast.next;\n        }\n        return true;\n    }\n}","compare_result":"110000000000000000000","title_slug":"linked-list-cycle","has_notes":false}